services:
  backend:
    build:
      context: ../../..
      dockerfile: docker/infrastructure/dev/php/Dockerfile
      args:
        - "USER=${USER:-someone}"
        - "UID=${UID:-1000}"
        - "GID=${GID:-1000}"
    pull_policy: never
    container_name: ${DOCKER_CONTAINER_NAME_PREFIX}-backend
    volumes:
      - ../../../backend:/var/www/html
    tty: true
    restart: unless-stopped
    depends_on:
        db:
          condition: "service_healthy"
        nginx:
          condition: "service_healthy"
        redis:
          condition: "service_healthy"
    networks:
      - db-network
      - nginx-network
      - redis-network

  db:
    image: mysql:9.0.1
    pull_policy: never
    container_name: ${DOCKER_CONTAINER_NAME_PREFIX}-db
    environment:
      - MYSQL_DATABASE=${DOCKER_DB_DATABASE}
      - MYSQL_USER=${DOCKER_DB_USERNAME}
      - MYSQL_PASSWORD=${DOCKER_DB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${DOCKER_DB_PASSWORD}
    ports:
      - "${DOCKER_DB_PORT}:3306"
    volumes:
      - db-data:/var/lib/mysql
    restart: unless-stopped
    networks:
      - db-network

  nginx:
    build:
      context: ../../..
      dockerfile: docker/infrastructure/dev/nginx/Dockerfile
    pull_policy: never
    container_name: ${DOCKER_CONTAINER_NAME_PREFIX}-nginx
    ports:
      - "8080:80"
    volumes:
      - ../../../backend:/var/www/html
      - ../../../backend/storage/logs/nginx/:/var/log/nginx/
      - ../../../backend/storage/logs/sepervisord/:/var/log/sepervisord/
    restart: unless-stopped
    networks:
      - nginx-network
  redis:
    image: redis:7.4-alpine
    container_name: redis
    restart: always
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - redis-network

  redis_insight:
    image: redislabs/redisinsight:2.54.0
    container_name: redis_insight
    restart: always
    command:
      - 'redis-server'
      - '--requirepass ${DOCKER_REDIS_PASSWORD}'
    ports:
      - "8001:5540"
    volumes:
      - redis-insight-data:/db
    depends_on:
        redis:
          condition: "service_healthy"
    networks:
      - redis-network

networks:
  db-network:
    driver: bridge
    name: dev-db-network
  nginx-network:
    driver: bridge
    name: dev-nginx-network
  redis-network:
    driver: bridge
    name: dev-redis-network

volumes:
  db-data:
    driver: local
    name: dev-db-data
  redis-data:
    driver: local
    name: dev-redis-data
  redis-insight-data:
    driver: local
    name: dev-redis-insight-data

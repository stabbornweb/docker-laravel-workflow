#############################################################
###########                                       ###########
########### Docker Compose for Development Server ###########
###########           Laravel Projects            ###########
###########                                       ###########
#############################################################

networks:
  db-network:
    driver: bridge
    name: ${DOCKER_APP_NAME}-dev-db-network
  nginx-network:
    driver: bridge
    name: ${DOCKER_APP_NAME}-dev-nginx-network
  redis-network:
    driver: bridge
    name: ${DOCKER_APP_NAME}-dev-redis-network

volumes:
  db-data:
    driver: local
    name: dev-db-data
  redis-data:
    driver: local
    name: dev-redis-data
  redis-insight-data:
    driver: local
    name: dev-redis-insight-data
#  backend-npm-data:
#    driver: local
#    name: dev-backend-npm-data
#  backend-composer-data:
#    driver: local
#    name: dev-backend-composer-data

services:
  # PHP Service
  backend:
    build:
      context: ../../..
      dockerfile: docker/infrastructure/dev/php/Dockerfile
      args:
        - "USER=${USER:-someone}"
        - "UID=${UID:-1000}"
        - "GID=${GID:-1000}"
    pull_policy: never
    container_name: ${DOCKER_APP_NAME}-dev-backend
    volumes:
      - ../../../backend:/var/www/html
    tty: true
    restart: unless-stopped
    depends_on:
        db:
          condition: "service_healthy"
        redis:
          condition: "service_healthy"
    networks:
      - db-network
      - nginx-network
      - redis-network

  # Database Service
  db:
    build:
      context: ../../..
      dockerfile: docker/infrastructure/dev/mysql/Dockerfile
    container_name: ${DOCKER_APP_NAME}-dev-db
    environment:
      - MYSQL_DATABASE=${DOCKER_DB_DATABASE:-laravel}
      - MYSQL_USER=${DOCKER_DB_USERNAME:-laravel}
      - MYSQL_PASSWORD=${DOCKER_DB_PASSWORD:-laravel}
      - MYSQL_ROOT_PASSWORD=${DOCKER_DB_PASSWORD:-laravel}
    ports:
      - "${DOCKER_DB_PORT:-3306}:3306"
    volumes:
      - db-data:/var/lib/mysql
    restart: unless-stopped
    networks:
      - db-network
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h localhost -u${DOCKER_DB_USERNAME:-laravel} -p${DOCKER_DB_PASSWORD:-laravel}" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Nginx Service
  nginx:
    build:
      context: ../../..
      dockerfile: docker/infrastructure/dev/nginx/Dockerfile
    pull_policy: never
    container_name: ${DOCKER_APP_NAME}-dev-nginx
    ports:
      - "8080:80"
    volumes:
      - ../../../backend:/var/www/html
      - ../../../backend/storage/logs/nginx/:/var/log/nginx/
      - ../../../backend/storage/logs/sepervisord/:/var/log/sepervisord/
    restart: unless-stopped
    networks:
      - nginx-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Redis Service
  redis:
    image: redis:7.4-alpine
    container_name: ${DOCKER_APP_NAME}-dev-redis
    restart: always
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - redis-network
    healthcheck:
      test: redis-cli ping
      interval: 5s
      timeout: 10s
      retries: 20

  # Redis Insight Service
  redis_insight:
    image: redislabs/redisinsight:2.54.0
    container_name: ${DOCKER_APP_NAME}-dev-redis-insight
    restart: always
    command:
      - 'redis-server'
      - '--requirepass ${DOCKER_REDIS_PASSWORD:-redis}'
    ports:
      - "8001:5540"
    volumes:
      - redis-insight-data:/db
    depends_on:
        redis:
          condition: "service_healthy"
    networks:
      - redis-network
